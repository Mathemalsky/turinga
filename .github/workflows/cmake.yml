# github auto suggested file
name: CMake

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build-linux:
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    
    # print the release name to use it when relasing
    outputs:
      release_name: ${{steps.get-version.outputs.release_name}}

    steps:
    - uses: actions/checkout@v2
    
    - name: lint
      # check the code fullfills the clang-format
      run: clang-format --dry-run --Werror -i src/*.cpp include/*.hpp
      
    - name: configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      if: success()
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      if: success()
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      
    - name: name version after date
      if: github.ref == 'refs/heads/master'
      run: echo ::set-output name=release_name::$(echo $(date '+%Y-%m-%d'))
      id: get-version

    # zip the binary file
    - name: zipping file
      if: github.ref == 'refs/heads/master'
      run: zip -r turinga21-linux.zip bin
    
    # upload files to artifacts
    - name: upload zips to GitHub actions artifact storage
      if: github.ref == 'refs/heads/master'
      uses: actions/upload-artifact@v2
      with:
        name: turinga21-${{steps.get-version.outputs.release_name}}-linux
        path: ${{github.workspace}}/turinga21-linux.zip

  build-windows:
    runs-on: windows-latest
    
    # only when build on linux succeed
    needs: [build-linux]

    steps:
    - uses: actions/checkout@v2
      
    - name: configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      if: success()
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      if: success()
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      
    - name: name version after date
      if: github.ref == 'refs/heads/master'
      run: echo ::set-output name=release_name::$(echo $(date '+%Y-%m-%d'))
      id: get-version

    # zip the binary file
    - name: zipping file
      if: github.ref == 'refs/heads/master'
      run: zip -r turinga21-linux.zip bin
    
    # upload files to artifacts
    - name: upload zips to GitHub actions artifact storage
      if: github.ref == 'refs/heads/master'
      uses: actions/upload-artifact@v2
      with:
        name: turinga21-${{steps.get-version.outputs.release_name}}-linux
        path: ${{github.workspace}}/turinga21-linux.zip
        
  # autogenrate releases
  release:
    runs-on: ubuntu-latest
    # requires the files to be build
    needs: [build-linux]
    # runs only on master
    if: github.ref == 'refs/heads/master'
    steps:
    # download the required files also to this runner
    - name: download all workflow run artifacts
      uses: actions/download-artifact@v2
      with:
        path: ./
         
    # create a normal release 
    - name: create release
      id: create_release
      uses: actions/create-release@master
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      with:
        tag_name: ${{needs.build.outputs.release_name}}
        release_name: turinga21-${{needs.build.outputs.release_name}}
        draft: false
        prerelease: false
    
    # upload all files to GitHub       
    - name: upload linux release
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      with:
        upload_url: ${{steps.create_release.outputs.upload_url}} 
        asset_name: turinga21-${{needs.build.outputs.release_name}}-linux.zip
        asset_path: turinga21-${{needs.build.outputs.release_name}}-linux/turinga21-linux.zip
        asset_content_type: application/zip
